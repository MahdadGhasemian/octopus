# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  created_at: DateTime!
  description: String
  id: Int!
  image: String
  name: String!
  updated_at: DateTime!
}

input CreateCategoryDto {
  description: String!
  image: String!
  name: String!
}

input CreatePaymentDto {
  description: String!
  order_id: Int!
}

input CreateProductDto {
  category_id: Float!
  description: String!
  image: String!
  is_active: Boolean!
  name: String!
  price: Float!
  sale_price: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetCategoryDto {
  created_at: DateTime!
  description: String!
  id: Float!
  image: String!
  name: String!
  updated_at: DateTime!
}

type GetHealthDto {
  database: String!
  dbResponseTime: String!
  rabbitResponseTime: String!
  rabbitmq: String!
  redis: String!
  redisResponseTime: String!
  status: String!
}

type GetProductDto {
  category: GetCategoryDto
  category_id: Float!
  created_at: DateTime!
  description: String!
  id: Float!
  image: String!
  is_active: Boolean!
  name: String!
  price: Float!
  sale_price: Float!
  updated_at: DateTime!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LinksType {
  current: String!
  first: String
  last: String
  next: String
  previous: String
}

type ListCategoryDto {
  data: [GetCategoryDto!]!
  links: LinksType!
  meta: MetaType!
}

type ListProductDto {
  data: [GetProductDto!]!
  links: LinksType!
  meta: MetaType!
}

type MetaType {
  currentPage: Int!
  filter: JSONObject
  itemsPerPage: Int!
  search: String
  searchBy: [String!]
  select: [String!]
  sortBy: JSONObject
  totalItems: Int!
  totalPages: Int!
}

type Mutation {
  createCategory(createCategoryDto: CreateCategoryDto!): Category!
  createPayment(createPaymentDto: CreatePaymentDto!): Payment!
  createProduct(createProductDto: CreateProductDto!): Product!
  deleteCategory(id: String!): Category!
  deleteProduct(id: String!): Product!
  updateCategory(id: String!, updateCategoryDto: UpdateCategoryDto!): Category!
  updateProduct(id: String!, updateProductDto: UpdateProductDto!): Product!
}

type Payment {
  amount: Float!
  created_at: DateTime!
  description: String!
  id: Int!
  order_id: Float!
  paid_date: DateTime!
  payment_status: PaymentStatus!
  updated_at: DateTime!
  user_id: Float!
}

enum PaymentStatus {
  FAILED
  PAID
  PENDING
}

type Product {
  category: Category!
  category_id: Float!
  created_at: DateTime!
  description: String!
  id: Int!
  image: String!
  is_active: Boolean!
  name: String!
  price: Float!
  sale_price: Float!
  updated_at: DateTime!
}

type Query {
  categories(filter: [String!], limit: Int = 10, page: Int = 1, relations: [String!], search: String, searchBy: [String!], sortBy: [String!]): ListCategoryDto!
  category(id: String!): Category!
  healthStore: GetHealthDto!
  product(id: String!): Product!
  products(filter: [String!], limit: Int = 10, page: Int = 1, relations: [String!], search: String, searchBy: [String!], sortBy: [String!]): ListProductDto!
}

input UpdateCategoryDto {
  description: String
  image: String
  name: String
}

input UpdateProductDto {
  category_id: Int
  description: String
  image: String
  name: String
}