# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GetHealthDto {
  status: String!
  rabbitmq: String!
  rabbitResponseTime: String!
  database: String!
  dbResponseTime: String!
  redis: String!
  redisResponseTime: String!
}

type MetaType {
  itemsPerPage: Int!
  totalItems: Int!
  currentPage: Int!
  totalPages: Int!
  sortBy: JSONObject
  searchBy: [String!]
  search: String
  select: [String!]
  filter: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LinksType {
  first: String
  previous: String
  current: String!
  next: String
  last: String
}

type Category {
  id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String
  image: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Product {
  id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String!
  image: String!
  category_id: Float!
  category: Category!
  price: Float!
  sale_price: Float!
  is_active: Boolean!
}

type Payment {
  id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  user_id: Float!
  amount: Float!
  paid_date: DateTime!
  payment_status: PaymentStatus!
  order_id: Float!
  description: String!
}

enum PaymentStatus {
  PENDING
  FAILED
  PAID
}

type GetCategoryDto {
  created_at: DateTime!
  updated_at: DateTime!
  id: Float!
  name: String!
  description: String!
  image: String!
}

type ListCategoryDto {
  meta: MetaType!
  links: LinksType!
  data: [GetCategoryDto!]!
}

type GetProductDto {
  created_at: DateTime!
  updated_at: DateTime!
  id: Float!
  name: String!
  description: String!
  image: String!
  category_id: Float!
  category: GetCategoryDto
  price: Float!
  sale_price: Float!
  is_active: Boolean!
}

type ListProductDto {
  meta: MetaType!
  links: LinksType!
  data: [GetProductDto!]!
}

type Query {
  healthStore: GetHealthDto!
  categories(page: Int = 1, limit: Int = 10, sortBy: [String!], searchBy: [String!], search: String, filter: [String!], relations: [String!]): ListCategoryDto!
  category(id: String!): Category!
  products(page: Int = 1, limit: Int = 10, sortBy: [String!], searchBy: [String!], search: String, filter: [String!], relations: [String!]): ListProductDto!
  product(id: String!): Product!
}

type Mutation {
  createCategory(createCategoryDto: CreateCategoryDto!): Category!
  updateCategory(id: String!, updateCategoryDto: UpdateCategoryDto!): Category!
  deleteCategory(id: String!): Category!
  createProduct(createProductDto: CreateProductDto!): Product!
  updateProduct(id: String!, updateProductDto: UpdateProductDto!): Product!
  deleteProduct(id: String!): Product!
  createPayment(createPaymentDto: CreatePaymentDto!): Payment!
}

input CreateCategoryDto {
  name: String!
  description: String!
  image: String!
}

input UpdateCategoryDto {
  name: String
  description: String
  image: String
}

input CreateProductDto {
  name: String!
  description: String!
  image: String!
  category_id: Float!
  price: Float!
  sale_price: Float!
  is_active: Boolean!
}

input UpdateProductDto {
  name: String
  description: String
  image: String
  category_id: Int
}

input CreatePaymentDto {
  order_id: Int!
  description: String!
}