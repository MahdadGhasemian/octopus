services:
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    env_file:
      - ./apps/auth/.env
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
    depends_on:
      - kafka
      - postgres
      - redis

  store:
    build:
      context: .
      dockerfile: ./apps/store/Dockerfile
      target: development
    command: npm run start:dev store
    env_file:
      - ./apps/store/.env
    ports:
      - '3001:3001'
    volumes:
      - .:/usr/src/app
    depends_on:
      - kafka
      - postgres
      - redis

  storage:
    build:
      context: .
      dockerfile: ./apps/storage/Dockerfile
      target: development
    command: npm run start:dev storage
    env_file:
      - ./apps/storage/.env
    ports:
      - '3002:3002'
    volumes:
      - .:/usr/src/app
      - images_data:/usr/src/values/images
      - documents_data:/usr/src/values/documents
      - media_data:/usr/src/values/media
      - compressed_data:/usr/src/values/compressed
      - cache_images_data:/usr/src/values/cache_images
      - images_data_private:/usr/src/values/images_private
      - documents_data_private:/usr/src/values/documents_private
      - media_data_private:/usr/src/values/media_private
      - compressed_data_private:/usr/src/values/compressed_private
      - cache_images_data_private:/usr/src/values/cache_images_private
    depends_on:
      - kafka
      - postgres

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9020:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9092'
    depends_on:
      - 'kafka'
    logging:
      driver: none

  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - 21181:2181
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always
    logging:
      driver: none

  kafka:
    image: bitnami/kafka:3.3
    ports:
      - 9094:9093
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    restart: always
    depends_on:
      - zookeeper
    logging:
      driver: none

  postgres:
    image: postgres
    env_file:
      - .env
    environment:
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - '5436:5432'
    logging:
      driver: none

  pgadmin4:
    image: elestio/pgadmin
    env_file:
      - .env
    environment:
      PGADMIN_LISTEN_PORT: 8080
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '8087:8080'
    logging:
      driver: none

  redis:
    image: bitnami/redis
    ports:
      - 6376:6379
    volumes:
      - redis_data:/data
    environment:
      ALLOW_EMPTY_PASSWORD: yes
  
  redis-insight:
    image: redis/redisinsight
    restart: always
    ports:
      - '5549:5540'
    volumes:
      - redis_insight_data:/data

volumes:
  zookeeper_data:
  kafka_data:
  postgres_data:
  pgadmin_data:
  redis_data:
  redis_insight_data:
  images_data:
  documents_data:
  media_data:
  compressed_data:
  cache_images_data:
  images_data_private:
  documents_data_private:
  media_data_private:
  compressed_data_private:
  cache_images_data_private:
